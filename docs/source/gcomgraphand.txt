gcomgraphand
============

Similar to gcomgraphand2 (yes the naming migth be a bit confusing). Here takes an Tensor of size (-1,gs,gs,c,c,n) resulting in (-1,gs,gs,c,c). So it runs the same kind of mode Transformation on a graph of n graphs (gs, c) instead of 2 graphs.

Arguments

* **gs**: The Number of Nodes in each global Graph.

* **c=2**: The Number of Nodes in each subgraph.

* **n=2**: The Number of Graphs that are combines using mode

* **mode**: either "and","prod","or" or "sum". Here "and" and "or" are Rounded versions of "prod" and "sum" respectively. The kind of Transformation that combines the Graphs.

* **cut=0.5**: Where to round the graph after the mode transformation, Each Value above cut will be set to 1 and each value below to 0, each Value that is equal to cut will be also set to 1

* **c_const=1000**: Since the Rounding is implementet using relus (relu(1+c_const*(X-cut))-relu(c_const*(X-cut))) , you require a numerical constant to decide how fast the rounding function goes from 0 to 1. This could be set higher, but this could result in diverging gradients.



